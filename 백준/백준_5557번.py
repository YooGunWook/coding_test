"""
상근이가 1학년 때, 덧셈, 뺄셈을 매우 좋아했다. 
상근이는 숫자가 줄 지어있는 것을 보기만 하면, 마지막 두 숫자 사이에 '='을 넣고, 나머지 숫자 사이에는 '+' 또는 '-'를 넣어 등식을 만들며 놀고 있다. 
예를 들어, "8 3 2 4 8 7 2 4 0 8 8"에서 등식 "8+3-2-4+8-7-2-4-0+8=8"을 만들 수 있다.
상근이는 올바른 등식을 만들려고 한다. 상근이는 아직 학교에서 음수를 배우지 않았고, 20을 넘는 수는 모른다.
따라서, 왼쪽부터 계산할 때, 중간에 나오는 수가 모두 0 이상 20 이하이어야 한다. 
예를 들어, "8+3+2-4-8-7+2+4+0+8=8"은 올바른 등식이지만, 8+3+2-4-8-7이 음수이기 때문에, 상근이가 만들 수 없는 등식이다.
숫자가 주어졌을 때, 상근이가 만들 수 있는 올바른 등식의 수를 구하는 프로그램을 작성하시오.

11
8 3 2 4 8 7 2 4 0 8 8
"""

n = int(input())
num_list = list(map(int, input().split(" ")))

# dp 기반 풀이
def solution(n, num_list):
    dp = [[0] * 21 for _ in range(n)]  # 각 숫자별로 최대 20까지 연산 가능함.
    dp[0][num_list[0]] += 1  # 첫번째 연산에 1 더해준다.
    for i in range(1, n - 1):  # 처음과 마지막을 제외함
        for j in range(21):  # 각 수식에 대해서
            if dp[i - 1][j]:  # 값이 있을 때
                if j + num_list[i] <= 20:  # 20보다 작을 경우
                    dp[i][j + num_list[i]] += dp[i - 1][j]
                if j - num_list[i] >= 0:  # 0보다 클 경우
                    dp[i][j - num_list[i]] += dp[i - 1][j]
    return dp[n - 2][num_list[n - 1]]


print(solution(n, num_list))
